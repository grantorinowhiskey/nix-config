{ config, pkgs, nixpkgs-unstable, lib, ... }:

{
  # multimedia user group, necessary for services access to directories
  users.groups.multimedia = {};

  # Auto renewed SSL certificates
  security.acme = {
    acceptTerms = true;
    defaults.email = "z6lbxfnhi@mozmail.com";
    certs."ynso.duckdns.org" = {
      domain = "*.ynso.duckdns.org";
      dnsProvider = "duckdns";
      dnsPropagationCheck = true;
      credentialFiles = { "DUCKDNS_TOKEN_FILE" = config.sops.secrets."duckdns-token".path;
      };
    };
  };

  # Allow nginx to use certs from acme
  users.users.nginx.extraGroups = [ "acme" ];

  # nginx reverse proxy
  services.nginx = {
    enable = true;
    virtualHosts = {

      # jellyfin
      "jellyfin.ynso.duckdns.org" = {
        useACMEHost = "ynso.duckdns.org";
        forceSSL = true;
        locations."/" = {
          proxyPass = "http://127.0.0.1:8096";
        };
      };

      # sabnzbd
      "sabnzbd.ynso.duckdns.org" = {
        useACMEHost = "ynso.duckdns.org";
        forceSSL = true;
        locations."/" = {
          proxyPass = "http://127.0.0.1:8080";
        };
      };

      # radarr
      "radarr.ynso.duckdns.org" = {
        useACMEHost = "ynso.duckdns.org";
        forceSSL = true;
        locations."/" = {
          proxyPass = "http://127.0.0.1:7878";
        };
      };

      # sonarr
      "sonarr.ynso.duckdns.org" = {
        useACMEHost = "ynso.duckdns.org";
        forceSSL = true;
        locations."/" = {
          proxyPass = "http://127.0.0.1:8989";
        };
      };

    };
  };

  services.jellyfin = {
    enable = true;
    # port 8096
    group = "multimedia";
  };

  services.sabnzbd = {
    enable = true;
    # port 8080
    group = "multimedia";
  };

  services.radarr = {
    enable = true;
    # port 7878
    group = "multimedia";
  };

  # containers
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."sonarr" = {
    image = "linuxserver/sonarr:4.0.10";
    environment = {
      "PGID" = "1000";
      "PUID" = "1000";
      "TZ" = "Europe/Stockholm";
    };
    volumes = [
      "/home/jt/appdata/sonarr/config:/config:rw"
      "/tank/media:/data:rw"
    ];
    ports = [
      "8989:8989/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=sonarr"
      "--network=sonarr_default"
    ];
  };
  systemd.services."docker-sonarr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-sonarr_default.service"
    ];
    requires = [
      "docker-network-sonarr_default.service"
    ];
    partOf = [
      "docker-compose-sonarr-root.target"
    ];
    wantedBy = [
      "docker-compose-sonarr-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-sonarr_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f sonarr_default";
    };
    script = ''
      docker network inspect sonarr_default || docker network create sonarr_default
    '';
    partOf = [ "docker-compose-sonarr-root.target" ];
    wantedBy = [ "docker-compose-sonarr-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-sonarr-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };

}
